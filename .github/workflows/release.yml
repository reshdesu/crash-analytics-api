name: 🚀 Create Release

on:
  push:
    tags:
      - 'v*'  # Triggers on any tag starting with 'v' (v1.0.0, v2.1.3, etc.)

permissions:
  contents: write  # Required to create releases

jobs:
  create-release:
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Get full history for changelog
      
      - name: 📋 Extract tag info
        id: tag_info
        run: |
          TAG=${GITHUB_REF#refs/tags/}
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "version=${TAG#v}" >> $GITHUB_OUTPUT
          echo "is_prerelease=$(if [[ $TAG == *alpha* || $TAG == *beta* || $TAG == *rc* ]]; then echo true; else echo false; fi)" >> $GITHUB_OUTPUT
      
      - name: 📝 Generate changelog
        id: changelog
        run: |
          # Get the previous tag for changelog
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          
          if [ -z "$PREV_TAG" ]; then
            # First release - show all commits
            COMMITS=$(git log --oneline --pretty=format:"- %s" | head -20)
            echo "## 🎉 Initial Release" > changelog.md
            echo "" >> changelog.md
            echo "### Recent Changes:" >> changelog.md
            echo "$COMMITS" >> changelog.md
          else
            # Show commits since last tag
            COMMITS=$(git log $PREV_TAG..HEAD --oneline --pretty=format:"- %s")
            echo "## 📈 Changes since $PREV_TAG" > changelog.md
            echo "" >> changelog.md
            if [ -n "$COMMITS" ]; then
              echo "### What's Changed:" >> changelog.md
              echo "$COMMITS" >> changelog.md
            else
              echo "### What's Changed:" >> changelog.md
              echo "- Minor updates and improvements" >> changelog.md
            fi
          fi
          
          # Add standard sections
          echo "" >> changelog.md
          echo "## Features" >> changelog.md
          echo "" >> changelog.md
          echo "### Enterprise Security" >> changelog.md
          echo "- HMAC Authentication - Cryptographically signed requests" >> changelog.md
          echo "- Rate Limiting - IP-based protection (configurable)" >> changelog.md
          echo "- Data Validation - 15+ validation rules prevent abuse" >> changelog.md
          echo "- Anonymous Reporting - Zero personal data collected" >> changelog.md
          echo "" >> changelog.md
          echo "### Core Functionality" >> changelog.md
          echo "- Universal API - Works with Python, JavaScript, Go, and more" >> changelog.md
          echo "- Auto-Setup - Database tables created automatically" >> changelog.md
          echo "- Multi-app Support - Single API for all your applications" >> changelog.md
          echo "- Self-Healing - Recreates missing tables if needed" >> changelog.md
          echo "" >> changelog.md
          echo "### Analytics & Insights" >> changelog.md
          echo "- 100+ SQL Queries - Ready-to-use analytics" >> changelog.md
          echo "- Hardware Analysis - GPU, CPU, memory breakdowns" >> changelog.md
          echo "- Error Patterns - Find common crash causes" >> changelog.md
          echo "- Dashboard Ready - Works with Grafana, Metabase" >> changelog.md
          echo "" >> changelog.md
          echo "## Quick Start" >> changelog.md
          echo "" >> changelog.md
          echo '```bash' >> changelog.md
          echo "# 1. Fork and clone this repository" >> changelog.md
          echo "git clone https://github.com/YOUR-USERNAME/crash-analytics-api.git" >> changelog.md
          echo "cd crash-analytics-api" >> changelog.md
          echo "" >> changelog.md
          echo "# 2. Install dependencies" >> changelog.md
          echo "pnpm install" >> changelog.md
          echo "" >> changelog.md
          echo "# 3. Set up Supabase + Cloudflare (see README.md)" >> changelog.md
          echo "" >> changelog.md
          echo "# 4. Deploy" >> changelog.md
          echo "pnpm run deploy" >> changelog.md
          echo "" >> changelog.md
          echo "# 5. Test your deployment" >> changelog.md
          echo 'API_ENDPOINT="your-endpoint" HMAC_SECRET="your-secret" pnpm test' >> changelog.md
          echo '```' >> changelog.md
          echo "" >> changelog.md
          echo "## Documentation" >> changelog.md
          echo "" >> changelog.md
          echo "- Setup Guide: See [README.md](README.md) for complete setup instructions" >> changelog.md
          echo "- Analytics Queries: Check [database/example-queries.sql](database/example-queries.sql) for 100+ example queries" >> changelog.md
          echo "- Python Client: Use [clients/python/crash_reporter.py](clients/python/crash_reporter.py) in your Python apps" >> changelog.md
          echo "" >> changelog.md
          echo "## Security" >> changelog.md
          echo "" >> changelog.md
          echo "This release has been security audited:" >> changelog.md
          echo "- No secrets in version control" >> changelog.md
          echo "- HMAC request signing prevents abuse" >> changelog.md
          echo "- Rate limiting protects against DoS" >> changelog.md
          echo "- Input validation prevents injection attacks" >> changelog.md
          echo "- Anonymous data collection only" >> changelog.md
          echo "" >> changelog.md
          echo "## Support" >> changelog.md
          echo "" >> changelog.md
          echo "- Issues: [GitHub Issues](https://github.com/reshdesu/crash-analytics-api/issues)" >> changelog.md
          echo "- Discussions: [GitHub Discussions](https://github.com/reshdesu/crash-analytics-api/discussions)" >> changelog.md
          echo "- Security: Report security issues privately" >> changelog.md
          echo "" >> changelog.md
          echo "---" >> changelog.md
          echo "" >> changelog.md
          echo "Built for the developer community. Free, open source, and privacy-first." >> changelog.md
          
          # Output for GitHub Action
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          cat changelog.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: 🎉 Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.tag_info.outputs.tag }}
          name: "${{ steps.tag_info.outputs.tag }}"
          body: ${{ steps.changelog.outputs.changelog }}
          prerelease: ${{ steps.tag_info.outputs.is_prerelease }}
          generate_release_notes: false  # We generate our own
          draft: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: ✅ Release created
        run: |
          echo "🎉 Release ${{ steps.tag_info.outputs.tag }} created successfully!"
          echo "🔗 View at: https://github.com/${{ github.repository }}/releases/tag/${{ steps.tag_info.outputs.tag }}"