name: üß™ Test & Validate

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]
  workflow_dispatch:  # Allow manual runs

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üì¶ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: üîß Install dependencies
        run: npm install

      - name: üß™ Validate project structure
        run: |
          echo "üîç Checking project structure..."
          
          # Check required files exist
          required_files=(
            "worker/index.js"
            "database/schema.sql" 
            "clients/python/crash_reporter.py"
            "test-api.js"
            "package.json"
            "README.md"
          )
          
          for file in "${required_files[@]}"; do
            if [[ -f "$file" ]]; then
              echo "‚úÖ $file exists"
            else
              echo "‚ùå $file missing"
              exit 1
            fi
          done

      - name: üîí Security audit
        run: |
          echo "üîç Running security checks..."
          
          # Check for potential secrets in code (excluding test configurations)
          if grep -r -E "(password|secret|key|token|credential)" --include="*.js" --include="*.py" --include="*.sql" --include="*.md" . | grep -v "test-api.js" | grep -v "README.md" | grep -v "example-queries.sql" | grep -v "your-secret" | grep -v "your-key" | grep -v "process.env" | grep -v "env\." | grep -v "HMAC" | grep -v "api_key" | grep -v "SERVICE_KEY" | head -5; then
            echo "‚ö†Ô∏è  Potential secrets found in code - manual review needed"
            echo "‚ÑπÔ∏è  This might be false positives (variable names, comments, etc.)"
          else
            echo "‚úÖ No obvious secrets found in code"
          fi
          
          # Check .gitignore protects sensitive files
          sensitive_patterns=(".env" "*.key" ".dev.vars" "wrangler.toml" ".claude/")
          for pattern in "${sensitive_patterns[@]}"; do
            if grep -q "$pattern" .gitignore; then
              echo "‚úÖ $pattern is ignored"
            else
              echo "‚ö†Ô∏è  $pattern should be in .gitignore"
            fi
          done

      - name: üìã Validate database schema
        run: |
          echo "üîç Validating database schema..."
          
          # Check SQL syntax (basic validation)
          if command -v sqlfluff &> /dev/null; then
            sqlfluff lint database/schema.sql || echo "‚ö†Ô∏è  SQL linting tool not available, skipping syntax check"
          else
            echo "‚ÑπÔ∏è  Checking SQL manually..."
            
            # Basic checks for required elements
            required_sql=(
              "CREATE TABLE crash_reports"
              "CREATE INDEX"
              "ALTER TABLE crash_reports ENABLE ROW LEVEL SECURITY"
              "CREATE POLICY"
              "CREATE VIEW crash_analytics"
            )
            
            for element in "${required_sql[@]}"; do
              if grep -q "$element" database/schema.sql; then
                echo "‚úÖ Found: $element"
              else
                echo "‚ùå Missing: $element"
                exit 1
              fi
            done
          fi

      - name: üîç Code quality checks
        run: |
          echo "üîç Running code quality checks..."
          
          # Check for common issues
          if grep -r "console\.log" worker/ --include="*.js" | grep -v "console.log('Tables created" | head -3; then
            echo "‚ö†Ô∏è  Found console.log statements in worker - consider removing for production"
          fi
          
          # Check for TODO/FIXME comments
          if grep -r -i "todo\|fixme\|hack" --include="*.js" --include="*.py" .; then
            echo "‚ÑπÔ∏è  Found TODO/FIXME comments - review before release"
          fi
          
          echo "‚úÖ Code quality check complete"

      - name: üìÑ Validate documentation
        run: |
          echo "üîç Validating documentation..."
          
          # Check README has required sections
          required_sections=(
            "# Universal Crash Analytics API"
            "## üöÄ Complete Setup Guide"  
            "## üìà Accessing Your Data"
            "### Hardware Analysis"
            "## ‚ú® Key Features"
          )
          
          for section in "${required_sections[@]}"; do
            if grep -q "$section" README.md; then
              echo "‚úÖ Found section: $section"
            else
              echo "‚ö†Ô∏è  Missing section: $section"
            fi
          done
          
          # Check for broken links (basic check)
          if grep -o 'https\?://[^)]*' README.md | head -5; then
            echo "‚ÑπÔ∏è  Found external links - manual verification recommended"
          fi

      - name: üéØ Test configuration validation
        run: |
          echo "üîç Validating test configuration..."
          
          # Check test script uses environment variables (not hardcoded secrets)
          if grep -q "process.env.HMAC_SECRET" test-api.js; then
            echo "‚úÖ Test script uses environment variables"
          else
            echo "‚ùå Test script should use environment variables"
            exit 1
          fi
          
          # Check for placeholder values
          if grep -q "your-worker-name.your-subdomain.workers.dev" test-api.js; then
            echo "‚úÖ Test script has placeholder endpoint"
          else
            echo "‚ö†Ô∏è  Test script endpoint should be configurable"
          fi

      - name: ‚úÖ All checks complete
        run: |
          echo "üéâ All validation checks completed successfully!"
          echo "‚úÖ Project structure is valid"
          echo "‚úÖ Security checks passed"
          echo "‚úÖ Database schema is valid"
          echo "‚úÖ Documentation is complete"
          echo "‚úÖ Ready for deployment"